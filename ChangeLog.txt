
Installation Reminder: in your \steamapps folder locate the folder
\workshop\content\255710\455403039 you can just replace the old dll with this new one until it's pushed out via
steam workshop update.


KH Todo:


 + place or two still where I think I can avoid makavo's original detouring or reflection and just
   use "reverse - redirects". Need to play around with if after 1.6.2 bakes for awhile.
   the 'known issue fix' in build_010 sounds small but it's kind change that need users to test
   every type of situation with - that said I'm expecting issues.

 + re-evaluate with clear head if 'ensureinit()' is really ever needed now that we force
   the array recreation on every deseralize. Shits still there for safety but I don't
   think it's needed now.

**ChangeLog \ DevNotes**
-----------------------

12-22-2016 v1.6.2-f1 build_010
 + BUG FIX - There were cases where we were stopping buildings from catching fire from
   trees spreading it. This was actually masking a known issue with Radio Towers burning
   with choppers unable to put them out - THAT IS NOT OUR ISSUE BTW, it's CO's.  But users
   of UT actually were not getting the problem - lol. 
   I've corrected it so that buildings catch fire like they should, however I also exempt
   those with RadioMastAI's till they fix it. Anyway the bug came from a reflection invoked
   priv func that for some reason was silently failing. *shugs* it was code I wanted to port
   to reverse-redirect solution for private access anyway so I finally did that.  

 + Known Issue Fix - Exiting to desktop while sh1t's unpaused\happening in the scene that involves
   trees+262k causing log entries about array bounds or object doesn't exist are now fixed.
   This related back to 1.6 loading changes and how we had to reverts to keeping redirects around.
   Solution was to force the recreation of the array on every map load just before deserialize 
   'no matter what' - previously we could assume shit was already cleaned on map-unload.
   The COST was anywhere from an extra 5ms to 100ms (depending on timing and
   how large you have your tree-scaling set to) However we also save a few milliseconds
   on map-unload since we're not cleaning there anymore, instead we do it Loader.OnRelease()
   so it only happens when exiting to main menu. In the end it's probably +dozen ms on average.
   I tested this with some old maps <262 and > 262k and newer saves of various sorts and with same
   flipping ghostmode on\off.
   It seems good, and the map editor ghosting issue has not returned (I didn't expect it too).


 ~ Moved Options screen functions to seperate class, refactored large parts of the code.
 + No more co-routine BS for tooltips, minor tweaks in naming\tooltip desc.
 + The result is a much more dynamic options screen, no more having to wait for the next
   OnSettings() call to update some things, namely the dev level options panel.  
 + Hopefully cleared up some confusion with regard to logging options, if you select Dev.
   It should not set the basic option for you as part of it, and not allow you to change
   that unless you first unselect dev-level. bla bla bla nobody but like 2 people probably
   care.
 + LimitTreeManager.Helper.TreeUpdate property to properly return correct scaled value
   based on 'activeness' of the mod and use that where needed instead of direct value, was
   not a bug thankfully due to other factors.

 ~ finally Removed some lingering commented out source 
 ~ Detouring logging now spits out sourceclass.functionname -> destclass.functionname.
 ~ Build 09 was debugging\gui changes mentioned.
 

12-17-2016 v1.6.1-f2 build_008
 ~ more minor tweaks in logging (we had some lines not marked debug mode only)
 ~ and 2 that were marked debug logging enabled only that were meant to always show.

 
12-15-2016 v1.6.1-f2 build_007
 ~ Minor tweaks in some log messages, add timestamp with miliseconds in a few spots and
   some minor formating\workind tweaks.

 ~ removed a couple lines of debugging stuff (helicopters); added ability to dump custom
  data indexes and 'byte' sizes to log in the lower debug menu.  Makes being able to get
  

 + Added ghost mode. Should allow mod to now operate while 'active' but not actually
   do anything. IE keep tree limit at 262k and not load or save our extra data.
   Allows users who want to load a UT saved map that has extra data in it without
   actually loading that extra data. Maybe they want to wipe our data without having the
   trees load, or maybe in theory idk our data is bad for some reason.  
   The use cases for this are generally minimal but they exist.

 ~ Tweaked burnbuffer trim action on > 128 vs > 64.

 ~ Known Issue: Investigated log exceptions on application.quit from map loaded with extra trees.
   No easy way to solve this atm, it's a bit of side effect of the new loading changes in 1.6
   Basically I wipe the array clear upon level unloading,if not paused before exit there can
   be things still trying to access stuff before it finishs it's exit process.
   This used to not happen because our redirects were removed before this even happened.
   Now since they are always-on it's an issue.
   The fix would be to do this on-release but that causes an old issue with Mapeditor retaining
   sh1t in the array if you load map after map without exiting to main menu first.
   There is probably a way to get around this, I have some things in mind but it's for
   another release one that I'll need to really test the sh1t out of, not this point release.

12-7-2016 v1.6.0-f4 Build_006 (RC)


 + Planning ahead in the container object we user to store the buring stuff.
   Have allocated objects for future use for the tree data as well. Also added
   at the cost of maybe another 1k of data overhead a bunch of placeholder reserved
   ints\strings\and {objects}.. so that if at later time changes to the current one
   are not possible via binaryformatter, well at least we have some headroom for
   change.  Also added some extra information into the container on each save.
   Like the UTC-date\Mod build number\Game version and platform, that way if 
   some sends me a file, and I can't even load it, or even if I can I can extract.
   that basic information.  


 + Looked into the certain fire related calls and the randomizer. I don't see the connection
   to more trees yet, if anything people should be getting less fire, I think what was going
   on was part the new fireAI and part this mod being fucked up in 1.6.0_f4-Build01.

 + Fixed the issue of Helo's getting stuck fighting fire that doesn't exist.. or fires that exit
   that might not be in the burning array. They were a byproduct of lots of little things that
   are fixed now. And if some case I've not come across yet ever produces it or 
   a user has a build_001 save.  ResetAllBurningTrees should clear everything out.
 
 + ClearAllOurSaveDataFromThisFile show in option with debug_level 2 set will, when inside a
   loaded map, wipe the "makavo/unlimiter" and "KHUnlimiter_v1_0" data stored in memory\file.
   When you press the button it's gone, however it's not really gone till you save.
   It doesn't remove anything from the game active though... so in theory you can press it 
   all you want, so long as you save your game (and new copies of data get saved ... or not saved
   if <262k) in use.  *Provide for some extreme case where user may want to force a wipe. 
    

 + when debug_level 2 is use extra options appear in options, these allow me to dump info.
   I will probably remove 2 of them eventually, but *ResetAllBurningtrees* basically reset's
   your map to make sure NO trees are buring or damaged. You still have to wait for the 'ground'
   to recover though. ~6mo.  Basically if you're in Forest Fire hell it'll reset everything.

 + added options to the options menu, namely the set seperate log file, and extra debugging
   there are related .xml config file additions for these too.

 + Added Debugging class file, holds some function used by new gui buttons.
 
 + Wrote our Wrappers for save\read\erase to Simmanager I thought there was a locking problem.
   Was part of debugging but there wasn't an issue but good result if we have proper sync now anyway.
   // SaveUtils class

 + Removed some the extreme debugging code I had in last version, needs another pass..
   maybe after release

 + Finally removed the old PluginChanged() dead code. Ok the source is still there commented out
   but we no longer compile in the dead code.


 + Found and fix the "deleted trees re-appear issue" 
   Basically we were not clearing data when it existed, and we no longer needed it (down packed <262k). Easy enough to fix.
   Mucho thanks to SamSamTS for sending me a debuglevel2 log.. showed me right where to focus.
   Funny enough was working on similar related to similar function for burning trees storage at the time.
   Life has funny timing sometimes.
   //bug fixed

 + fixed additional saving issue where we were saving an unpacked burning when really we shouldn't
   have been saving one at all.
   //new issue in new code fixed.

 + Reworked around the damn timing issue where we were saving BT's stuff after the darn storagearea
   was already seralized,needing a double save. In theory how we wanted to do it should have worked per the code. idk
   whatever. Changed things to get called via DataExtentions OnSave. Deseralize still works from direct
   replacement. Bottomline sh1t is working nice now... beside the fact there is way more lines of code
   then there needs to be right now.
  

12-4-2016 v1.6.0-f4 Build_004 (beta)


 + fixed direct bug where we where when packing we were reordering the live TM.burningtrees array.
   we now make a copy and work from that. That might have been the cause of some freaky freaky
   fire issues after a save, especially if at least a couple trees were burning at time.
   //critical Bug fixed - peeps with those now 'bad' saves should in theory
   //still be able to load...clear up any existing fires happen and problem should not happen again.

 + Was a clear bug upon loading a map, CO now resets the bitflags for burning\damaged
   clearing them before loading the trees.
   I somehow missed that little addition... it's now included 
   //bug fixed.. 

 + re:known issue of unable to load map previously saved with UT without UT enabled
   because stored indexes in burning list could reference indexes > 262k.
   We've in addition to reordering when packing we now only save burningtree items that have
   m_treeindex <262k via original process.
   In theory this means if you load map saved with UT but don't have UT enabled... yeah you
   don't get the extra trees but you also will not get buring indexes for missing treee in the
   buring list and things *should* match up ok for what was loaded.
   //critical bug fixed


 + We now attempt to store those with >262k as their burningtree tree index into our own
   seperatestorage - packed or not packed, using a different storage\serialze method than before.
   Now using binaryformatter, we'll have to see how this goes.. some other mods use this method
   so I'm gonna try it, less of a headache then manually writing byte arrays.  
   But I don't know how fragile it is to 'change'..not friendly I think.

 + On major errors we try to just not save burningtrees or recreate ones >262k..,
   Probably better them bombing out and is it really the end of the world?


 ~ A ton of debugging code added and sh1t ton of un-optimised new code added so shit
   is gonna be slower during saving\loading a bit (should be 'that' noticeable) till 
   I'm sure things are working 99% ok and can go back though and refactor a bit.


11-29-2016 v1.6.0-f4 Build_003
 + updated code to account for LoadingExtentions:Oncreated no longer firing early in the process.
   we now enable our detoured function when enabled with 'enabled'\onstartup and it's only disabled when 'disabled'
   we do load when Asset's are loading now like oldschool oringinal way, seems to work now, made related adjustments.

 + Added reverse detour for CommonBuildingAI.TrySpreadFire, reflection invoke wasn't working right.
 + various other minor tweaks for final public build related to disaster patch.


11-20-2016 v1.6.0.-f3_build 01
+ basic changes for compatibility with disaters update.

5-14-2016 v1.4.1-f2_build_04 (beta)
 + Added feature, via the options menu to enable users to select how the game should deal with
   'null' or missing tree-info's that happen when a tree does not exist anymore or is disabled.
   DoNothing= just as it sounds it does nothing, the game operates nomally and will generate errors.
   ReplaceTree = Replaces any null treeinfo's with PrefabCollection<TreeInfo>(0), a built in game tree.
   RemoveTree = Deletes any tree where there is a null treeinfo or index problem.
   
   Having ReplaceTree or RemoveTree set does increase loadtimes but it's marginal unless
   there are a ton of damaged\null trees, even then it's a seconds or two for every couple thousand.
   the main perf hit is actually just the logging, with verbose mode turned off it's less.

 + Added open that can only be enabled by editing the config file, which is provided only as a
   last resort for users, it allows will remove ALL trees from a map.
   The setting is <EmergencyOnly_RemoveAllTrees>false</EmergencyOnly_RemoveAllTrees>
   To use it you must set it to "true", while ALSO having RemoveTree set, and also
   you must have debug logging enabled AND the debuglogginglevel must be > 1.
   The reason for ALL those conditions is for safety...you must really mean to enable it.
   When activated any map you load will have *all* it's trees deleted.  I suggest if anyone
   uses this they make sure they have auto-save disabled.
   This option is not meant to be left enabled, it's meant for set it... load the game.. load map
   save cleaned map, exit game and reverse the related settings back.

   

5-12-2016 v1.4.1-f2_build_01
 +recompile for updated dlls in lastest patch
 +incorporated thale5's suggested patch for custom tree infoindex issues above for trees above 262k
 many thanks for that patch, solves a long standing issue I didn't have a good solution for previously.

3-21-2016 v1.4.0-f3_build_01
 + recompiled for updated dlls and version stamp for "landscape" update, no real code changes

2-2-2016 -v1.3.0-f4_build_01
 + changes for snowfall beta patch\dlc; 
 + namely updates for the new weathermanager vs windmanger for the wind function
 + updates in a few places for updated versions of OverlapQuad taking a terraincollisiontype


1-5-2016 -v1.2.2-f3_build_004
 + corrected OnRemoved() vs OnDisabled() bug.

11-18-2015 -v1.2.2-f3_Build_003
 + Added GUI option to change the max tree's scaling factor, option is disabled when
   a level is loaded.



11-13-2015 -v1.2.2-f3_Build_002 (beta)
Summary: Major reworking of treedata save formate and serialize and deserialze processes.
 - removed Onplugin change related code finally, code still there in beta but it's dead code.
  only possible effect really should be for anyone with pirated version < v1.1.1

 + Changed save format version from 1 to 3. (v2 was used during testing)
 + New format adds addtional header items to the saved byte array.
   Bytes 0-1 still == ushort save format version number
   bytes 2-5 == uint32 that stores the size of the tree array when the save happened.
   bytes 6-9 == uint32 that stotes the actual count of the number of trees that were saved.
   bytes 10-13 == uint32 reserved for future use
   bytes 14-17 == uint32 reserved for future use
   bytes 18-19 == ushort Save Flags; 0=none 1= Packedflag rest == reserved for future use;    
 + All saves are now in format v3 
 + Deserialize methods will detect v1 and load using original method.
 + Deserialize methods will detect v2+ and load using new methods based on data in the header.
 + Serialize method now works as follows. First our serializer runs, if it finds that there are
   more then 266144 'created' trees it'll go ahead and save those trees in our private datastream.
   It will now only save 'created' ones not all the empty entries like it used too. Then it will
   markup the header information with how many it saved.
   Next the overridden default serializer will run, if the list of real tress is empty for some
   reason, it'll just go ahead and save everything in tree buffer up to default limit of 262144.
   If list of 'created' trees exists then it will run through that list 262144 times but inserting
   real trees first, then dummy trees if it runs out for the rest. This way we're always storing
   the first 262144 real trees in the default space of the save.

 + Added <ScaleFactor>4</ScaleFactor> to configuation file options. It is not added in gui on
   purpose.  The setting now controls the number of trees allowed in chunks of 262144.
   Valid settings are 4 (default),5,6,7,8; 4 == 1million 5=1.25million ect. If set higher then 8
   or lower then 4, then 4 will be used. This now allows up to 2million trees. It's not added to
   the gui options because this is going to be technically 'unsupported feature' even though yes
   it works and yes all the other code changes have been adjusted for everything.

 + Afore mentioned changes allows us to save adding lots of dead space to a save\map file.
   As an example a save with 300k real trees previously using the 1048576limit would save
   about 1 Megabyte in the save file space with the new method. The savings goes up\down
   depending on the number of unused trees in the scaled size one uses. 8 bytes is saved per
   unused tree, additionally trees that used to be saved as part of our extra data are now
   saved\packed down into the default range, so even more space can be saved. This has the
   added benefit that if the mod is disabled at least 262144 trees will be loaded, where as
   in the past it was luck of the draw based on what index a tree might have been saved in.
   ie if 500k trees and only 100 were in the index from 0-262144k then only 100k would be
   loaded if the mod was not loaded, now 262144k of them will be loaded.

 ~ These benefits are only noticed upon saving\resaving an existing file.
 
 

10-6-2015 - v1.2.1_Build_002
Summary: Basically just interal changes.
+ Minor enhancements for config file, add custom log feil ability, and not dumping a trace when no config file exists.
~ Refactored initialization so that we don't 'depend' on PluginChange events anymore, though if someone has an old
  version out there pre 11b\c when Onenabled\OnRemoved were added - like a pirated version we still try to work.
  Basically we now use OnEnable\OnRemove to trigger initialization.
  We also no longer fire our start up code upon the name being invoked, instead we just do that in the constructor
  which was more or less same result as before.

~ Added saving the config object to file upon the first time it gets created. This prevents the case of a new user
  loading the mod, having a 'config object' created and used, but if they never touched the options screen
  it technically never got saved and there for we would go the exception re-create route upon every load till they
  did. This is change is really just cosmetic so we don't log errors. 

~ Changed most calls from Debug.log to our own Logger.dbgLog wrapper to match above mentioned enhancement.
  Also the log wrapper automatically adds the calling method name. This saves work on my end, and also
  means we are technically storing less actual static text in our compiled dll. Only log call that doesn't use
  our new log wrapper is the initial "mod has loaded' call.

~ Comment documented more of the functions in source.


10-4-2015 - v1.2.1_Build_001
Summary: Account for other mod's exceptions causing problems. Semi-Bug fix.
+ Corrected workshopid field to be uLong not that it was actually causing a problem yet.

+ Bug fix: Adjusted for an unaccounted for case where mods before us would exception error during thier Loading.OnCreated
  callbacks, found this stops further mods down the chain from having their OnCreated()'s called.
  Unless the person was using Isolated Failures mod.
  Details: We always assumed ours got called, but I also assumed that if our correct setup was not done during OnCreated
  To try to do it during OnLevelLoaded. That was a mistake as it creates a bug in this case where
  the mod think's it's setup correctly, but upon save will think there are 1million tree buffers when there
  are still only 262k as the 'initing' of the new array size never happened during the load deserialize routine because
  it never got fired because our redirects were not active yet due to aforementioned fallout from someone elses
  exception. There is not too much we can do here other then to make sure NOT to try to setup ourselves in
  OnLevelLoaded(), which i've corrected for now. Two - encourage other modders to try{}catch{} around their god dam
  OnXXXX() overrides.
  

9-26-2015 - v1.2.0_Build_006
+ Added option to not have trees have an effect on wind like the game normally does.
  When option is enabled we redirect WindManager.CalculateSelfHeight(), and inside there in our version
  if option enabled we don't add the height of the tree to the terrain in a given area 
  to the height for the windcell.

9-25-2015 - v1.2.0_Build_005
+ reverted calculation bug in calculate Area height introduced with the prior source code fkup
  bug was difference between something being converted from float to int and back in CalculateAreaHeight().

9-25-2015 - v1.2.0_Build_004
+ Just a display name\title change from Trees Unlimiter 1.1 to Unlimited Trees Mod; internally namespace and such is
  unchanged though.

9-24-2015 - v1.2.0_Build_003
  Recovery\rebuilding of build002 due to source code fkup on my part and lost all AD changes.


9-20-2015 - v1.2.0_Build_002 
Afterdark patch update 
+ Recompiled for Afterdark update; however prior version should still work.

+ Found the root of the -1\0 tree item bug in editors that I had previously manually hacked around, 
  disabled that hack around code. Fix was a certain deserialize related line from the original that started
  at 0 instead of 1 for one of loops.

+ Split out and now re-direct calls to TreeManager.FinalizeTree() to our own. 
  Previously our ReleaseTreeimplementation() carried all the finalizetree() code inside itself instead of calling
  out... I don't know why that was originally done but for now unless there is a problem I've sperated it out
  to it's own proper redirected function.  Maybe back in 1.0.0.0 of CSL C\O had it all combined.
  I can probably not redirect ReleaseTreeimplementation() anymore now that I've done the above, but leaving for now
  till I feel safe and this version has been in the wild a while.



9-8-2015 v111c_Build_005
+ Reworked redirection\detours code to be able to reverse the patching. 
  Basically undid prior method in v003 of patching only once.
  Reworked the entire code so that we a) don't do redirection until map\game load if not already patched,
  b) un-do patching upon unloading map\game to main menu or reloading. c) revert patching upon entering asset editor.
  d) This allows asset-editor to be used while mod is turned on (or at least in my limited testing things seem to work fine now).

+ Turning on and off the plugin does not require a restart of the game, it will unload it's patching and reset things
  when toggled from enabled to disabled. This mean if you still have issues with the Asset Editor you can just
  disable the plugin and re-enter the Asset Editor without having to exit the game.

+ Minor tweak to jury rig and edge case were new maps were getting a -1 tree count (same for new assets) due to itemcount=0. 

+ Added logging option via standard gui options for mods, stored in config file TreeUnlimiterConfig.xml in root
  of CSL steam gamefolder. It's primarly just for debugging during development and unless instructed probably
  should never be needed by typical user, left in the code just in case someone runs into into issues and I need
  them to post a super detailed log.

9-6-2015 v111c_Build_003

- Removed some unneccessary logging for each redirection call, it's was just polluting the log file.
+ Added additional logging for debug purposes but conditioned them to not appear for nomal users.  
+ Added ability for the mod to work in the map editor, seems to work, extensive test not completed.
+ Had to add some code to flush\rebuild the tree buffer after a new-map; unlike game loads, fresh "new maps"
  were retaining trees loaded by a previous 'load map', very wierd.  
- Tried but failed to get the mod while using the asset editor to work right for trees with the mod loaded.
+ Changed rediction code to only fire once per CSL load.. loads on start doesn't fire upon every map load.
+ There were cases where the redirection calls were being called more times then needed, they should in theory now only
  be called once while the mod loads and not on each map load.
+ Assembly Company Name\copyright fields contains build string, done so main assembly ver stamp always
 matches C\O build# for now and a user can right click in windows and see what copy they actually have.


7-1-2015 v111c_Build_001 
Initial updates for CSL 1.1.1c compatibility (few lines added to mirror c\o function updates) nothing major.
 
